#+TITLE: Deploy To Pair

Create namespace for components:
#+BEGIN_SRC shell :results silent
kubectl create ns prow-${SHARINGIO_PAIR_NAME}
#+END_SRC

#+BEGIN_SRC shell :results silent
kubectl label ns prow-$SHARINGIO_PAIR_NAME cert-manager-tls=sync --overwrite
#+END_SRC

Create namespace for workloads:
#+BEGIN_SRC shell :results silent
kubectl create ns prow-${SHARINGIO_PAIR_NAME}-workloads
#+END_SRC

Create the values for the deployment:
#+BEGIN_SRC yaml :tangle ./prow.yaml
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: prow-${SHARINGIO_PAIR_NAME}
spec:
  chart:
    git: https://github.com/cncf-infra/prow-config
    path: charts/prow
    ref: e063bb6ca15b52fd6525608c2781064cc16bc36b
  releaseName: prow-${SHARINGIO_PAIR_NAME}
  values:
    podNamespace: prow-${SHARINGIO_PAIR_NAME}-workloads
    githubFromSecretRef:
      enabled: true
      oauth:
        name: "prow-github-oauth"
      hmac:
        name: "prow-github-hmac"

    ingress:
      certmanager:
        enabled: false
      hosts:
        - host: prow.${SHARINGIO_PAIR_BASE_DNS_NAME}
      tls:
        - secretName: letsencrypt-prod
          hosts:
            - prow.${SHARINGIO_PAIR_BASE_DNS_NAME}

    configFromConfigMap:
      enabled: true
      name: "prow-config"

    plugins:
      # config-updater
      # update prow cluster's configmaps from the repo with this plugin enabled; assumed to be a single repo
      config_updater:
        maps:
          config.yaml:
            name: config
          plugins.yaml:
            name: plugins
          jobs/**/*.yaml:
            name: job-config

      # which plugins should be enabled for which orgs or org/repos
      plugins:
        cncf-infra:
          # - approve
          - assign
          #- cat
          #- dog
          - hold
          - label
          - lgtm
          # - owners-label
          - shrug
          - size
          - skip
          - trigger
          - wip
          # - verify-owners
          - yuks

      cncf-infra/prow-config:
        - config-updater
        - pony

      cncf-infra/k8s-conformance:
        - cat
        - dog
        # - verify-conformance-request
#+END_SRC

Create HMAC:
#+BEGIN_SRC shell :results silent
export HMAC=$(openssl rand -hex 20)
kubectl -n prow-$SHARINGIO_PAIR_NAME create secret generic prow-github-hmac --from-literal=hmac="$HMAC" --dry-run=client -o yaml | kubectl apply -f -
#+END_SRC

Create the oAuth secret:
#+BEGIN_SRC shell :results silent
kubectl -n prow-$SHARINGIO_PAIR_NAME create secret generic prow-github-oauth --from-literal=oauth="$GITHUB_TOKEN" --dry-run=client -o yaml | kubectl apply -f -
#+END_SRC

Deploy prow:
#+BEGIN_SRC shell :results silent
envsubst < prow.yaml | kubectl -n prow-$SHARINGIO_PAIR_NAME apply -f -
#+END_SRC

Configure the deployment
#+BEGIN_SRC yaml :tangle prow-config.yaml
prowjob_namespace: prow-${SHARINGIO_PAIR_NAME}
pod_namespace: prow-${SHARINGIO_PAIR_NAME}-workloads
managed_webhooks:
  respect_legacy_global_token: true
  org_repo_config:
    ${SHARINGIO_PAIR_NAME}/prow-config:
      token_created_after: 2020-06-24T00:10:00Z
in_repo_config:
  enabled:
    '*': true
deck:
  spyglass:
    lenses:
      - lens:
          name: metadata
        required_files:
          - started.json|finished.json
      - lens:
          config:
          name: buildlog
        required_files:
          - build-log.txt
      - lens:
          name: junit
        required_files:
          - .*/junit.*\.xml
      - lens:
          name: podinfo
        required_files:
          - podinfo.json
plank:
  job_url_template: |
    {{if .Spec.Refs}}
      {{if eq .Spec.Refs.Org "kubernetes-security"}}https://console.cloud.google.com/storage/browser/kubernetes-security-prow/{{else}}https://prow.${SHARINGIO_PAIR_BASE_DNS_NAME}/view/gcs/kubernetes-jenkins/{{end}}
    {{else}}https://prow.${SHARINGIO_PAIR_BASE_DNS_NAME}/view/gcs/kubernetes-jenkins/{{end}}
    {{if eq .Spec.Type "presubmit"}}pr-logs/pull{{else if eq .Spec.Type "batch"}}pr-logs/pull{{else}}logs{{end}}
    {{if .Spec.Refs}}
      {{if ne .Spec.Refs.Org ""}}{{if ne .Spec.Refs.Org "kubernetes"}}/{{if and (eq .Spec.Refs.Org "kubernetes-sigs") (ne .Spec.Refs.Repo "poseidon")}}sigs.k8s.io{{else}}{{.Spec.Refs.Org}}{{end}}_{{.Spec.Refs.Repo}}{{else if ne .Spec.Refs.Repo "kubernetes"}}/{{.Spec.Refs.Repo}}{{end}}{{end}}{{end}}{{if eq .Spec.Type "presubmit"}}/{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}{{else if eq .Spec.Type "batch"}}/batch{{end}}/{{.Spec.Job}}/{{.Status.BuildID}}/
  report_templates:
    '*': '[Full PR test history](https://prow.${SHARINGIO_PAIR_BASE_DNS_NAME}/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}). [Your PR dashboard](https://prow.${SHARINGIO_PAIR_BASE_DNS_NAME}/pr?query=is:pr+state:open+author:{{with index .Spec.Refs.Pulls 0}}{{.Author}}{{end}}).'
  job_url_prefix_config:
    '*': https://prow.${SHARINGIO_PAIR_BASE_DNS_NAME}/view/
  default_decoration_configs:
    '*':
      gcs_configuration:
        bucket: s3://prow-logs
        path_strategy: explicit
      # secret must be set to RELEASE_NAME-s3-credentials
      s3_credentials_secret: prow-${SHARINGIO_PAIR_NAME}-s3-credentials
      utility_images:
        clonerefs: gcr.io/k8s-prow/clonerefs:v20201019-3b28521b87
        entrypoint: gcr.io/k8s-prow/entrypoint:v20201019-3b28521b87
        initupload: gcr.io/k8s-prow/initupload:v20201019-3b28521b87
        sidecar: gcr.io/k8s-prow/sidecar:v20201019-3b28521b87
decorate_all_jobs: true
periodics:
  - interval: 1m
    agent: kubernetes
    name: echo-test
    decorate: true
    spec:
      containers:
        - image: alpine
          command:
            - /bin/date
#+END_SRC

Apply configuration:
#+BEGIN_SRC shell :results silent
kubectl -n prow-${SHARINGIO_PAIR_NAME} \
    create configmap prow-config \
    --from-file=config\.yaml=<(envsubst < prow-config.yaml) \
    --dry-run=client \
    -o yaml \
      | kubectl apply -f -
#+END_SRC

Delete prow:
#+BEGIN_SRC shell :results silent
envsubst < prow.yaml | kubectl -n prow-$SHARINGIO_PAIR_NAME delete -f -
#+END_SRC

* Handy scripts

Template the local HelmRelease:
#+BEGIN_SRC shell
helm upgrade -i prow-${SHARINGIO_PAIR_NAME} \
    -n prow-${SHARINGIO_PAIR_NAME} \
    -f <(envsubst < <(cat prow.yaml | yq e '.spec.values' -P -)) \
    ~/prow-config/charts/prow/
#+END_SRC

#+RESULTS:
#+begin_example
Release "prow-bobymcbobs" has been upgraded. Happy Helming!
NAME: prow-bobymcbobs
LAST DEPLOYED: Mon May  3 13:57:16 2021
NAMESPACE: prow-bobymcbobs
STATUS: deployed
REVISION: 2
TEST SUITE: None
NOTES:
1. Get the application URL by running these commands:
#+end_example

Template what's applied in cluster:
#+BEGIN_SRC shell
helm template --debug prow-${SHARINGIO_PAIR_NAME} \
    -n prow-${SHARINGIO_PAIR_NAME} \
    -f <(\
      kubectl -n prow-${SHARINGIO_PAIR_NAME} \
      get helmreleases.helm.fluxcd.io prow-${SHARINGIO_PAIR_NAME} \
      -o=jsonpath='{.spec.values}' | yq e -P \
    ) ~/prow-config/charts/prow/
#+END_SRC

Rollout restart
#+BEGIN_SRC shell
kubectl -n prow-${SHARINGIO_PAIR_NAME} rollout restart $(kubectl -n prow-${SHARINGIO_PAIR_NAME} get deployments -o=jsonpath='{range .items[*]}{.kind}/{.metadata.name} {end}')
#+END_SRC

#+RESULTS:
#+begin_example
deployment.apps/prow-bobymcbobs-sdfg-crier restarted
deployment.apps/prow-bobymcbobs-sdfg-deck restarted
deployment.apps/prow-bobymcbobs-sdfg-ghproxy restarted
deployment.apps/prow-bobymcbobs-sdfg-hook restarted
deployment.apps/prow-bobymcbobs-sdfg-horologium restarted
deployment.apps/prow-bobymcbobs-sdfg-minio restarted
deployment.apps/prow-bobymcbobs-sdfg-plank restarted
deployment.apps/prow-bobymcbobs-sdfg-sinker restarted
deployment.apps/prow-bobymcbobs-sdfg-statusreconciler restarted
deployment.apps/prow-bobymcbobs-sdfg-tide restarted
#+end_example

Clean up workloads
#+BEGIN_SRC shell
kubectl -n prow-${SHARINGIO_PAIR_NAME}-workloads delete pods --force --grace-period=0 --all
#+END_SRC

Get logs for component
#+BEGIN_SRC shell
kubectl -n prow-${SHARINGIO_PAIR_NAME} logs -l app.kubernetes.io/component=hook --tail=100
#+END_SRC

Get all logs
#+BEGIN_SRC shell
kubectl -n prow-${SHARINGIO_PAIR_NAME} logs -l app.kubernetes.io/name=prow -f --tail=100 --max-log-requests 100 --prefix
#+END_SRC

Get gencred
#+BEGIN_SRC shell :results silent :dir (concat (getenv "HOME") "/test-infra")
go install ./gencred
#+END_SRC

Generate a Kubeconfig for use in Prow
#+BEGIN_SRC shell
set -x
CRED_NEW_CONTEXT=default
CRED_EXISTING_CONTEXT=in-cluster
CRED_SERVICEACCOUNT=${SHARINGIO_PAIR_NAME}-humacs
CRED_OUTPUT=/tmp/${SHARINGIO_PAIR_NAME}-kubeconfig-admin
gencred \
    -n $CRED_NEW_CONTEXT \
    --context $CRED_EXISTING_CONTEXT \
    -s ${SHARINGIO_PAIR_NAME}-humacs \
    --overwrite \
    -o $CRED_OUTPUT
ls -alh $CRED_OUTPUT
#+END_SRC

